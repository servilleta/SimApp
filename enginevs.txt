ENGINE COMPARISON REPORT: ENHANCED VS BIG ENGINE
================================================

1. OVERVIEW
-----------
- **Enhanced Engine (WorldClassMonteCarloEngine):**
  - GPU-accelerated, hybrid CPU/GPU Monte Carlo engine.
  - Designed for high performance, intelligent formula analysis, and batch processing.
  - Handles large files with adaptive batching, streaming, and memory optimizations.
  - Uses advanced formula dependency analysis and supports JIT compilation for monolithic kernel fusion.

- **Big Engine (BigMonteCarloEngine):**
  - Built for extremely large Excel models (100k+ formulas, enterprise scale).
  - Focuses on memory efficiency, graph-based dependency analysis, and chunked processing.
  - Implements Tarjan SCC for cycle detection and chunked BFS for dependency traversal.
  - Prioritizes robustness and scalability over advanced GPU features.

2. DATA IMPORT
--------------
- **Enhanced Engine:**
  - Imports formulas and constants from Excel files using advanced parsers.
  - Performs formula dependency analysis and builds an ordered calculation list.
  - Merges file constants and user-supplied constants for simulation.

- **Big Engine:**
  - Normalizes formulas from various input shapes (flat, nested, lists).
  - Builds a dependency graph with encoded nodes for memory efficiency.
  - Handles formula import and normalization internally, skipping standard analysis.

3. FORMULA PROCESSING
---------------------
- **Enhanced Engine:**
  - Analyzes formulas for GPU compatibility and groups them by type (arithmetic, complex, references).
  - Uses GPUFormulaEngine and GPULookupEngine for GPU execution; falls back to CPU for complex cases.
  - Supports batch processing, smart caching, and adaptive iteration reduction for large files.
  - Handles formula evaluation order, circular reference detection, and streaming for big files.

- **Big Engine:**
  - Builds a full dependency graph and uses topological sorting to determine evaluation order.
  - Detects cycles early using Tarjan SCC and aborts if found.
  - Uses chunked BFS to traverse dependencies in batches for memory efficiency.
  - Formula evaluation is performed using a dedicated ExcelFormulaEngine, but lacks advanced GPU grouping/optimization.

4. ITERATION HANDLING
---------------------
- **Enhanced Engine:**
  - Supports millions of iterations with adaptive reduction for very large models.
  - Uses advanced random engines (CURAND, CuPy) for input sampling, with GPU acceleration if available.
  - Tracks progress, supports timeouts, and performs memory cleanup every few iterations.

- **Big Engine:**
  - Handles very high iteration counts, but prioritizes memory and batch size limits (configurable).
  - Processes iterations in batches, updating progress after each batch.
  - Stores input samples for sensitivity analysis and final statistics.

5. GPU USAGE
------------
- **Enhanced Engine:**
  - Aggressively uses GPU for formula evaluation, random sampling, and batch processing.
  - Supports JIT compilation for monolithic kernel fusion, maximizing GPU throughput.
  - Falls back to CPU for formulas not compatible with GPU.

- **Big Engine:**
  - Primarily CPU-based, with focus on memory efficiency and graph traversal.
  - Does not implement advanced GPU features or kernel fusion.
  - Designed for robustness and compatibility with massive models, not raw GPU speed.

6. ISSUES WITH BIG ENGINE & SOLUTIONS
-------------------------------------
- **Current Issues:**
  - Repeated warnings: "No formula or value found for target cell ..." (e.g., C8, C207).
  - Simulation can get stuck or timeout if required cells are missing or not properly imported.
  - Lacks advanced error handling for missing dataâ€”keeps searching instead of failing fast.
  - No GPU acceleration, so performance may lag on smaller but complex files.

- **Possible Solutions:**
  1. **Improve Input Validation:**
     - Before running, check that all required cells in the dependency chain have formulas or values.
     - Abort early with a clear error if any are missing.
  2. **Enhanced Error Reporting:**
     - Log missing cells as errors, not just warnings, and return them in the API response.
  3. **Fallback/Default Values:**
     - Optionally allow user to specify default values for missing cells, or skip them with a warning.
  4. **GPU Integration:**
     - Investigate adding GPU-accelerated formula evaluation for batches, similar to the enhanced engine.
  5. **Documentation:**
     - Clearly document input requirements and error cases for users running large models.

7. ISSUES WITH ENHANCED ENGINE ON EXTREMELY LARGE FILES
------------------------------------------------------
- **Current Issues Observed:**
  - When running simulations on extremely large files, the enhanced engine (WorldClassMonteCarloEngine) can fail to progress or crash.
  - Backend logs and frontend debug output show:
    - Simulations stuck at initialization or early progress stages (e.g., 0% iterations, 0% progress).
    - `result.results: null`, `rawValues: undefined`, and `histogram: undefined` in frontend debug.
    - Backend status remains "streaming" or "initializing" with no progress in formula analysis or simulation.
    - No results or statistics are produced, and the simulation may eventually fail or time out.
  - The engine may not be able to handle the memory or computational load required for extremely large dependency graphs or formula sets.
  - No explicit error is returned to the user; the simulation simply fails to complete or returns empty/null results.
  - This can lead to confusion, as the frontend may show a failed or stuck state without a clear error message.

------------------------------------------------------
END OF ISSUES SECTION

================================================
END OF REPORT 