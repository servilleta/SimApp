# Monte Carlo Simulation Platform - Context & Architecture Guide

## Platform Overview

This is a **Monte Carlo Simulation Platform** designed to work with **ANY Excel file** to perform financial modeling and risk analysis. The platform is built with a React frontend and Python FastAPI backend, containerized with Docker for scalable deployment.

### Core Mission
- **Universal Excel Compatibility**: Works with any Excel file structure, never hardcoded to specific files
- **Monte Carlo Analysis**: Performs statistical simulations on financial models
- **Ultra Engine Focus**: Primary development focus is on the `ultra_engine.py` for maximum performance
- **Platform Agnostic**: Generic solutions that work across different Excel models and structures

## Critical Design Principles

### 🚨 NEVER HARDCODE FILE-SPECIFIC SOLUTIONS
This platform must work with ANY Excel file. **NEVER** hardcode:
- Specific sheet names (e.g., 'WIZEMICE Likest', 'Revenue Model')
- Specific cell ranges (e.g., C161:AL161, Row 107)
- Specific column letters or row numbers
- File-specific formulas or structures

### ✅ Always Use Generic Solutions
- Dynamic sheet detection
- Flexible cell range parsing
- Generic formula dependency tracking
- Configurable variable mapping
- Pattern-based cell identification

## Architecture Overview

```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   Frontend      │    │     Backend      │    │   Excel Files   │
│   (React)       │◄──►│   (FastAPI)      │◄──►│   (Analysis)    │
│                 │    │                  │    │                 │
│ - Dashboard     │    │ - Ultra Engine   │    │ - Dynamic       │
│ - Charts        │    │ - Excel Parser   │    │ - Any Structure │
│ - Controls      │    │ - Simulation     │    │ - User Uploads  │
└─────────────────┘    └──────────────────┘    └─────────────────┘
```

## Directory Structure

### Root Level
```
PROJECT/
├── backend/                 # Python FastAPI server
├── frontend/               # React application
├── nginx/                  # Reverse proxy configuration
├── monitoring/             # System monitoring tools
├── docker-compose.yml      # Container orchestration
└── context.txt            # This documentation file
```

### Backend Structure (`/backend/`)

#### Core Modules
- **`main.py`** (56KB) - FastAPI application entry point and route definitions
- **`config.py`** - Environment configuration and settings
- **`database.py`** - Database connection and models
- **`models.py`** (12KB) - SQLAlchemy data models

#### Excel Processing (`/backend/excel_parser/`)
- **`service.py`** (53KB) - Main Excel file processing service
- **`formula_engine.py`** (65KB) - Excel formula evaluation engine
- **`dependency_tracker.py`** (9.4KB) - **CRITICAL**: Generic Monte Carlo variable dependency tracking
- **`range_analyzer.py`** (10KB) - Dynamic cell range analysis
- **`enhanced_formula_engine.py`** (39KB) - Advanced formula processing

#### Simulation Engine (`/backend/simulation/`)
- **`service.py`** (35KB) - Simulation orchestration and management
- **`engine.py`** (88KB) - Core simulation logic
- **`router.py`** (9.4KB) - FastAPI simulation endpoints
- **`schemas.py`** - Pydantic models for API validation

#### Ultra Engine (`/backend/simulation/engines/`)
- **`ultra_engine.py`** (70KB) - **PRIMARY FOCUS**: High-performance simulation engine
- **`service.py`** (84KB) - Engine service coordination
- **`router.py`** (49KB) - Engine-specific API endpoints
- **`enhanced_engine.py`** (86KB) - Enhanced simulation capabilities

### Frontend Structure (`/frontend/src/`)

#### Core Application
- **`App.jsx`** (7.1KB) - Main React application component
- **`main.jsx`** - Application entry point
- **`index.css`** - Global styles

#### Feature Modules
- **`pages/`** - React page components
- **`components/`** - Reusable UI components
- **`services/`** - API communication layer
- **`store/`** - State management (likely Redux/Zustand)
- **`hooks/`** - Custom React hooks
- **`auth/`** - Authentication components

## Key Components Deep Dive

### 1. Monte Carlo Variable Dependency Tracker (`dependency_tracker.py`)

**Purpose**: Identifies which Excel cells depend on Monte Carlo variables for targeted re-evaluation

**Critical Features**:
- **Generic Variable Detection**: Works with ANY Monte Carlo variables (F4, G10, Z100, etc.)
- **Precise Regex Matching**: Uses word boundaries to avoid partial matches
- **Breadth-First Search**: Finds complete dependency chains
- **Platform Compatible**: No hardcoded file-specific references

**Key Methods**:
```python
def get_monte_carlo_dependent_cells(sheet_data, monte_carlo_variables)
def find_dependencies(formula, variables)
def extract_cell_references(formula)
```

### 2. Ultra Engine (`ultra_engine.py`)

**Purpose**: High-performance Monte Carlo simulation execution

**Key Features**:
- GPU acceleration support
- Advanced statistical analysis
- Memory-efficient processing
- Enhanced debugging capabilities
- Scientific notation handling

**Performance Optimizations**:
- JIT compilation support
- Parallel processing
- Memory pooling
- Efficient data structures

### 3. Excel Parser Service (`excel_parser/service.py`)

**Purpose**: Universal Excel file processing and formula evaluation

**Key Capabilities**:
- Dynamic sheet detection
- Formula parsing and evaluation
- Cell range analysis
- Data type conversion
- Error handling

### 4. Simulation Service (`simulation/service.py`)

**Purpose**: Orchestrates Monte Carlo simulations

**Workflow**:
1. Excel file upload and parsing
2. Monte Carlo variable identification
3. Dependency graph creation
4. Simulation execution
5. Statistical analysis
6. Results generation

## Data Flow

### Simulation Execution Process

1. **File Upload**: User uploads Excel file via frontend
2. **Parsing**: Backend parses Excel structure and formulas
3. **Variable Detection**: System identifies Monte Carlo variables
4. **Dependency Mapping**: Creates dependency graph using generic tracker
5. **Simulation Setup**: Configures simulation parameters
6. **Execution**: Ultra engine runs Monte Carlo iterations
7. **Analysis**: Statistical analysis of results
8. **Visualization**: Frontend displays charts and histograms

### API Endpoints

#### Excel Processing
- `POST /excel/upload` - Upload and parse Excel file
- `GET /excel/sheets` - List available sheets
- `GET /excel/cells/{range}` - Get cell data

#### Simulation Management
- `POST /simulation/create` - Create new simulation
- `GET /simulation/{id}/status` - Check simulation status
- `GET /simulation/{id}/results` - Get simulation results
- `DELETE /simulation/{id}` - Cancel simulation

#### Ultra Engine
- `POST /engines/ultra/simulate` - Execute ultra engine simulation
- `GET /engines/ultra/health` - Engine health check
- `GET /engines/ultra/metrics` - Performance metrics

## Database Schema

### Core Tables
- **users** - User authentication and profiles
- **simulations** - Simulation metadata and status
- **excel_files** - Uploaded file information
- **simulation_results** - Statistical results storage

### Key Relationships
- Users → Simulations (one-to-many)
- Simulations → Excel Files (many-to-one)
- Simulations → Results (one-to-one)

## Critical Lessons Learned

### 1. Dependency Tracking Precision
**Problem**: Over-aggressive formula re-evaluation caused exponential value explosion
**Solution**: Precise regex matching with word boundaries for exact variable references
**Impact**: Reduced re-evaluated cells from 2,352 to ~20-60 (only direct dependencies)

### 2. Platform Compatibility
**Problem**: Hardcoded solutions broke universal Excel compatibility
**Solution**: Generic algorithms that work with any Excel structure
**Principle**: Every solution must be file-agnostic

### 3. Formula Re-evaluation Strategy
**Problem**: Python formula engine ≠ Excel causing calculation errors
**Solution**: Strategic re-evaluation - only recalculate cells directly referencing Monte Carlo variables
**Benefit**: Maintains Excel's precise calculations while enabling Monte Carlo variation

### 4. Performance Optimization
**Focus**: Ultra engine performance is primary concern
**Approach**: GPU acceleration, memory optimization, parallel processing
**Goal**: Handle large Excel models efficiently

## Development Guidelines

### Code Quality Standards
- **Type Hints**: Use Python type hints throughout
- **Error Handling**: Comprehensive try-catch blocks
- **Logging**: Detailed logging for debugging
- **Testing**: Unit tests for critical components
- **Documentation**: Clear docstrings and comments

### Performance Requirements
- **Memory Efficiency**: Handle large Excel files (10MB+)
- **Processing Speed**: Complete simulations in reasonable time
- **Scalability**: Support multiple concurrent simulations
- **Resource Management**: Proper cleanup and memory management

### Security Considerations
- **File Validation**: Secure Excel file processing
- **Input Sanitization**: Protect against malicious formulas
- **Authentication**: Secure user access
- **Data Isolation**: Separate user data and simulations

## Environment Configuration

### Development
```bash
# Backend
cd backend
pip install -r requirements.txt
uvicorn main:app --reload --port 8000

# Frontend
cd frontend
npm install
npm run dev
```

### Production (Docker)
```bash
# Full stack deployment
docker-compose up --build

# Production build
docker-compose -f docker-compose.production.yml up --build
```

### Environment Variables
- `DATABASE_URL` - Database connection string
- `JWT_SECRET_KEY` - Authentication secret
- `CORS_ORIGINS` - Allowed frontend origins
- `DEBUG_MODE` - Enable/disable debug logging

## Monitoring & Observability

### Logging Levels
- **DEBUG**: Detailed Monte Carlo variable tracking
- **INFO**: Simulation progress and results
- **WARNING**: Performance issues and degradation
- **ERROR**: Failures and exceptions

### Key Metrics
- Simulation execution time
- Memory usage patterns
- Error rates
- User activity
- File processing performance

### Health Checks
- Database connectivity
- Ultra engine availability
- Memory utilization
- GPU status (if available)

## Future Considerations

### Scalability Enhancements
- Horizontal scaling with multiple ultra engine instances
- Load balancing for concurrent simulations
- Distributed processing capabilities
- Advanced caching strategies

### Feature Expansions
- Additional statistical distributions
- Advanced sensitivity analysis
- Batch simulation processing
- Enhanced visualization options

### Platform Integrations
- Cloud storage integration
- External data source connections
- API integrations with financial systems
- Export capabilities to various formats

## Critical Robustness Fixes - January 2025

### 🎯 **PRODUCTION-CRITICAL FIXES COMPLETED**

The platform underwent a comprehensive robustness audit that identified and fixed **4 critical issues** that were making Monte Carlo simulations non-deterministic and unreliable for production use.

#### **✅ Phase 1: Random Fallback Values → Deterministic 0.0**
**Problem**: Excel formula engine used `random.uniform(0.0001, 0.001)` for missing cells, causing exponential value explosion and non-reproducible results.

**Files Fixed**:
- `backend/excel_parser/formula_engine.py` (3 locations)
- `backend/excel_parser/enhanced_formula_engine.py`
- `backend/excel_parser/formula_engine_original_backup.py`

**Solution**: Replaced all random fallback values with deterministic `0.0` to ensure reproducible Monte Carlo simulations.

#### **✅ Phase 2: Non-Deterministic Date Functions → Fixed Dates**
**Problem**: Excel date functions (`TODAY()`, `NOW()`, `DAY()`) used `datetime.now()`, making results vary by execution time.

**Files Fixed**:
- `backend/excel_parser/formula_engine.py`
- `backend/super_engine/gpu_kernels.py`

**Solution**: 
- `_today()`: Returns fixed date `2024-01-01`
- `_now()`: Returns fixed datetime `2024-01-01 12:00:00`
- `gpu_today()` and `gpu_now()`: Use fixed dates for GPU calculations

#### **✅ Phase 3: Time-Based Random Seeding → Simulation-ID Based**
**Problem**: Random number generators used `time.time()` for seeding, preventing reproducible results.

**Files Fixed**:
- `backend/simulation/engine.py` (2 locations)
- `backend/simulation/engines/ultra_engine.py` (3 locations)
- `backend/simulation/random_engine.py`

**Solution**: All seeding now based exclusively on `simulation_id` hash with deterministic suffix, eliminating time dependency.

#### **✅ Phase 4: Fake Ultra Engine → Real Excel Formula Evaluation**
**Problem**: Ultra engine used placeholder `np.random.normal(100, 10)` instead of actual Excel formula evaluation.

**Files Fixed**:
- `backend/simulation/engines/ultra_formula_optimizer.py`
- `backend/simulation/engines/ultra_engine.py`

**Solution**: Replaced fake data generation with real `_safe_excel_eval()` calls and actual Excel formula dependency evaluation.

### **🔬 VERIFICATION & IMPACT**

#### **Before Fixes (Production Broken):**
- ❌ Monte Carlo results varied due to random fallbacks
- ❌ Date functions returned different values each run
- ❌ Random seeding based on current time made results unreproducible
- ❌ Ultra engine generated fake data instead of real Excel evaluation
- ❌ Platform unsuitable for production financial decisions

#### **After Fixes (Production Ready):**
- ✅ **100% Deterministic**: Same simulation_id produces identical results
- ✅ **Reproducible**: Results can be verified and audited
- ✅ **Real Excel Evaluation**: All engines use actual formula calculation
- ✅ **Audit Compliant**: Results can be reproduced for regulatory requirements

### **🚀 DEPLOYMENT STATUS**
All fixes deployed via Docker rebuild (January 2025). Platform now guarantees:
1. **Same Input → Same Output**: Identical simulation parameters produce identical results
2. **Audit Trail**: Every result reproducible with same simulation_id
3. **Real Calculations**: All Excel formulas actually evaluated, no fake data
4. **Time Independence**: Results don't depend on when simulation is run

## Emergency Debugging

### Common Issues
1. **~~Astronomical Values~~**: ✅ **FIXED** - Random fallback values replaced with deterministic 0.0
2. **~~Non-Reproducible Results~~**: ✅ **FIXED** - Time-based seeding replaced with simulation-id based seeding
3. **~~Fake Ultra Engine Results~~**: ✅ **FIXED** - Real Excel formula evaluation implemented
4. **Zero Variations**: Verify Monte Carlo variable connections
5. **Memory Issues**: Monitor ultra engine resource usage
6. **Performance Degradation**: Check formula re-evaluation scope

### Debug Commands
```bash
# Check simulation status
docker-compose logs backend | grep SIMULATION

# Monitor ultra engine
docker-compose logs backend | grep ULTRA

# Check dependency tracking
docker-compose logs backend | grep DEPENDENCY

# Verify deterministic behavior (Post-Robustness Fixes)
docker-compose logs backend | grep "ULTRA-REAL"          # Real formula evaluation
docker-compose logs backend | grep "deterministic"       # Deterministic seeding
docker-compose logs backend | grep "ZERO BUG FIX"       # Fallback value fixes
docker-compose logs backend | grep "Fixed.*2024-01-01"  # Date function fixes
```

## Remember: This Platform Must Work With ANY Excel File

Every development decision must consider universal compatibility. When implementing new features or fixes, always ask:
- "Will this work with different Excel file structures?"
- "Am I hardcoding anything file-specific?"
- "Is this solution generic enough for any Monte Carlo variables?"
- "Does this maintain the platform's universal nature?"

## 🔒 CRITICAL: Maintain Deterministic Behavior

After the January 2025 robustness fixes, the platform now guarantees reproducible results. **Never introduce**:
- Random fallback values (use `0.0` deterministically)
- Time-based seeding (use `simulation_id` hash only)
- Non-deterministic date functions (use fixed dates)
- Fake data generation (use real Excel formula evaluation)

**Always verify**: Same simulation_id produces identical results across runs.

The success of this platform depends on its ability to be truly universal while maintaining high performance through the ultra engine AND ensuring 100% deterministic, reproducible results for production financial modeling. 