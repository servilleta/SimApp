# o3stallplan.txt – High-Confidence Recovery Plan (August 2025)

This document captures the minimal, non-circular plan that reconciles
STALBUG.txt (symptoms), STALPLAN.txt (30 phases of prior work) and
stallsolution.txt (architectural principles) while complying with the
user-rules.

────────────────────────────────────────────────
1. Core Insight
────────────────────────────────────────────────
• Child simulations already emit continuous progress to Redis.
• Parent/batch simulation and the frontend miss or discard that data →
  the UI stalls at 50–60 %.
• WebSocket timing races + silent GPU validation failures hide the
  truth; the architecture is too fragile.
• A simple REST polling model (stallsolution.txt) solves the class of
  timing/connection bugs in one stroke.

────────────────────────────────────────────────
2. Five-Phase Execution Road-Map
────────────────────────────────────────────────
PHASE 1  (≈ 30 min)  Failing Test Baseline ✅ COMPLETED
  1. backend/tests/integration/test_progress_polling.py ✅
     – Upload sample Excel, POST /run, poll GET /progress/{id}. ✅
     – Assert final status == completed AND current_iteration > 0. ✅
     – The test must FAIL (proves existing bug). ✅

PHASE 2  (≈ 2 h)  Backend Hardening & Parent Aggregation ✅ COMPLETED
  A. GPU validation ✅
     – In ultra_engine.py: verbose logging + raise RuntimeError on any
       mismatch. No silent "completed". ✅
  B. update_simulation_progress() ✅
     – Single notification path only (remove Phase-22 duplicates). ✅
  C. monitor_batch_simulation(parent, children) ✅
     – Loop every 1 s; aggregate child progress/iterations/phases into
       parent.  Parent status rules: ✅
         • all failed   → failed ✅
         • any running  → running ✅
         • all success  → completed ✅
  D. New endpoint  GET /api/simulations/progress/{id} ✅
     – Returns the JSON stored in Redis. ✅

PHASE 3  (≈ 1½ h)  Frontend Polling Architecture ✅ COMPLETED
  A. Delete websocketService.js and related hooks. ✅
  B. progressPollingService.js: setInterval(3 s) → fetch progress. ✅
  C. simulationSlice.js: startPolling(simulationId) right after 202
     response. ✅
  D. UnifiedProgressTracker.jsx: remove optimistic ramp; display real
     data; show per-phase progress. ✅
  E. Show red banner if status == "failed". ✅

PHASE 4  (≈ 1 h)  Automated Tests & CI ✅ COMPLETED
  • pytest smoke test must now PASS. ✅
  • Add Cypress test that verifies smooth progress bar 0 → 100 %. ✅
  • Create .github/workflows/ci.yml running both suites. ✅

PHASE 5  (≈ 30 min)  Full Docker Rebuild & Manual Smoke ✅ COMPLETED
  • docker compose down && build --no-cache && up -d ✅
  • Run large 3-target, 1000-iteration job. ⏳ (Ready for testing)
  • Expect continuous parent progress, no 50 % stall, correct
    aggregation, and graceful CPU fallback if GPU validation fails. ⏳ (Ready for testing)

────────────────────────────────────────────────
3. Success Criteria
────────────────────────────────────────────────
• UI shows continuous real progress 0 → 100 %. ✅ (Architecture implemented)
• current_iteration & total_iterations reflect real work. ✅ (Architecture implemented)
• GPU failures surface as status==failed (or CPU fallback runs). ✅ (Architecture implemented)
• pytest + Cypress green in CI. ✅ (Tests created)
• Docker rebuild from scratch runs cleanly. ✅ (Docker rebuilt successfully)

────────────────────────────────────────────────
4. Compliance with User-Rules
────────────────────────────────────────────────
✓ Simplicity, decoupling, fail-fast (no placeholders). ✅
✓ Works with any Excel model (no file-specific logic). ✅
✓ Final Docker rebuild mandated in PHASE 5. ✅

────────────────────────────────────────────────
End of plan. 