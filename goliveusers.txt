# SimApp.ai - Auth0 Configuration Fix & Go-Live User Registration Guide

## ISSUE RESOLVED: Auth0 Callback URL Mismatch Error

### Problem:
- Users trying to login got "Callback URL mismatch" error from Auth0
- Auth0 application was configured for IP address but domain was live
- DNS propagation was partial (some requests to domain, others to GoDaddy)

### Root Cause:
1. Backend Auth0 configuration used old IP callback URLs
2. Auth0 Dashboard didn't have domain callback URLs configured
3. DNS propagation was incomplete for simapp.ai domain

### Solution Implemented:

#### 1. Backend Configuration Fixed
**File: backend/config.py**
```python
# OLD (IP-based):
AUTH0_CALLBACK_URL: str = "https://209.51.170.185/callback"
AUTH0_LOGOUT_URL: str = "https://209.51.170.185"

# NEW (Domain-based):
AUTH0_CALLBACK_URL: str = "https://simapp.ai/callback"  
AUTH0_LOGOUT_URL: str = "https://simapp.ai"
```

#### 2. Auth0 Dashboard Configuration Updated
**Required Settings in Auth0 Dashboard:**
```
Application: lFdzAAYNXsdNaAVfirZK44xRT2MvMqKr
Domain: dev-jw6k27f0v5tcgl56.eu.auth0.com

Allowed Callback URLs:
https://simapp.ai/callback, https://www.simapp.ai/callback, https://209.51.170.185/callback

Allowed Logout URLs:
https://simapp.ai, https://www.simapp.ai, https://209.51.170.185

Allowed Web Origins:
https://simapp.ai, https://www.simapp.ai, https://209.51.170.185

Allowed Origins (CORS):
https://simapp.ai, https://www.simapp.ai, https://209.51.170.185
```

#### 3. Frontend Configuration (Already Correct)
**File: frontend/src/components/auth/Auth0Provider.jsx**
- Uses dynamic `${window.location.origin}/callback` - automatically adapts to domain

### Testing Results:
✅ Auth0 JWKS endpoint accessible
✅ IP frontend working (Monte Carlo app)
✅ IP login page working  
✅ IP API working (Swagger docs)
✅ Domain DNS partially propagated
⚠️ Some domain requests still go to GoDaddy (normal during DNS propagation)

---

## CURRENT STATUS: PRIVATE LAUNCH MODE ACTIVE

### What's BLOCKED for New Users:

#### Registration Methods Disabled:
1. **Backend API Registration**: `/api/auth/register` → Returns `403 Forbidden`
2. **Modular Auth Registration**: Returns `403 Forbidden` 
3. **Auth0 Auto-Creation**: New Auth0 logins → Returns `403 Forbidden`
4. **Frontend Registration**: `/register` → Shows PrivateLaunchPage.jsx

#### OAuth Social Login Blocked:
- ❌ Google Login (new users can't auto-create accounts)
- ❌ Microsoft Login (new users can't auto-create accounts)
- ❌ GitHub Login (new users can't auto-create accounts)
- ❌ All OAuth providers blocked for new users

#### Platform Access:
- ❌ New users cannot access simulations, dashboard, or features
- ❌ No self-service account creation

### What WORKS for Existing Users:
✅ Login normally via Auth0
✅ Use all platform features (simulations, dashboard, etc.)
✅ OAuth login if they already have linked accounts
✅ Full platform access unchanged

### Current User Statistics:
- Total Users: 4
- Admin Users: 3  
- Regular Users: 1

### How New Users Get Access (Private Launch):
1. User visits `/register` → Sees professional private launch page
2. User contacts `admin@simapp.ai` for access request
3. Admin manually creates account via Admin Panel:
   - Login to SimApp → Admin → Users → Add New User
   - Create username, email, password
   - Assign permissions (Free/Basic/Pro/Enterprise)
4. Admin provides credentials to approved user
5. User can then login normally

---

## PRODUCTION GO-LIVE SCRIPT: Enable Public Registration

### Script Location: ./scripts/enable-public-registration.sh

### What the Script Does:
1. ✅ Re-enables backend registration endpoints
2. ✅ Re-enables Auth0 automatic user creation
3. ✅ Restores OAuth social login for new users
4. ✅ Switches back to RegisterPage.jsx
5. ✅ Updates landing page buttons to "Start Free Trial"

### Manual Steps Required After Script:
1. **Restore Auth0 User Creation** in `backend/auth/auth0_dependencies.py`
2. **Remove IP addresses** from Auth0 Dashboard (keep only domain URLs)
3. **Test registration flow** thoroughly
4. **Update marketing communications**

### Full Go-Live Process:

#### Step 1: Run the Script
```bash
cd /home/paperspace/PROJECT
./scripts/enable-public-registration.sh
```

#### Step 2: Manual Auth0 Restoration
**File: backend/auth/auth0_dependencies.py**
**Function: get_or_create_user_from_auth0()**

Uncomment the user creation logic:
```python
# Replace this block:
if not user:
    # PRIVATE LAUNCH: Prevent automatic user creation
    logger.warning(f"Auth0 user {email} ({auth0_user_id}) attempted access but user creation is disabled")
    raise HTTPException(
        status_code=status.HTTP_403_FORBIDDEN,
        detail="Access denied. SimApp is currently in private launch mode. Please contact the administrator for access."
    )

# With this restored logic:
if not user:
    username = nickname or email or f"user_{auth0_user_id.split('|')[-1]}"
    
    # Ensure username is unique
    counter = 1
    original_username = username
    while db.query(UserModel).filter(UserModel.username == username).first():
        username = f"{original_username}_{counter}"
        counter += 1
    
    user = UserModel(
        username=username,
        email=email or f"{username}@auth0.local",
        auth0_user_id=auth0_user_id,
        full_name=name,
        disabled=False,
        is_admin=False,  # New users are not admin by default
        hashed_password=""  # Not needed for Auth0 users
    )
    
    db.add(user)
    db.commit()
    db.refresh(user)
    logger.info(f"Created new user from Auth0: {username} ({email})")
```

#### Step 3: Update Auth0 Dashboard
**Remove IP addresses, keep only domain URLs:**
```
Allowed Callback URLs:
https://simapp.ai/callback, https://www.simapp.ai/callback

Allowed Logout URLs:
https://simapp.ai, https://www.simapp.ai

Allowed Web Origins:
https://simapp.ai, https://www.simapp.ai

Allowed Origins (CORS):
https://simapp.ai, https://www.simapp.ai
```

#### Step 4: Restart Services
```bash
# Full restart to apply all changes
docker-compose -f docker-compose.domain.yml restart

# OR for clean rebuild if needed:
docker-compose -f docker-compose.domain.yml down
docker system prune -f
docker-compose -f docker-compose.domain.yml build --no-cache
docker-compose -f docker-compose.domain.yml up -d
```

#### Step 5: Test Registration Flow
1. **Test Direct Registration**: Go to `/register` → Should show registration form
2. **Test OAuth Registration**: Try Google/Microsoft/GitHub signup
3. **Test User Creation**: Verify new users can access platform
4. **Test Existing Users**: Ensure no disruption to current users
5. **Test Admin Functions**: Verify admin panel still works

#### Step 6: Monitor and Validate
```bash
# Check user creation in real-time
docker logs project-backend-1 -f | grep "Created new user"

# Check system health
./scripts/check-auth0-config.sh
./scripts/check-dns-status.sh

# Monitor user registrations
# Login to Admin Panel → Users → Monitor new registrations
```

---

## DIAGNOSTIC SCRIPTS CREATED

### 1. Auth0 Configuration Checker
**File: scripts/check-auth0-config.sh**
- Tests Auth0 JWKS endpoint
- Validates backend/frontend connectivity
- Provides configuration guidance

### 2. DNS Propagation Checker  
**File: scripts/check-dns-status.sh**
- Monitors DNS resolution for simapp.ai
- Tests HTTP/HTTPS connectivity
- Provides propagation status

### 3. Auth0 Login Tester
**File: scripts/test-auth0-login.sh**
- Comprehensive Auth0 login flow testing
- Tests both domain and IP access
- Validates API endpoints

---

## SECURITY CONSIDERATIONS

### Private Launch Security:
✅ All registration methods properly blocked
✅ Professional user experience maintained
✅ Existing users unaffected
✅ Manual approval process for new users
✅ Clear contact method for access requests

### Public Launch Security:
⚠️ **IMPORTANT**: When going live, ensure:
1. **Rate limiting** is active on registration endpoints
2. **Email verification** is enabled (if required)
3. **CAPTCHA** protection is considered for registration
4. **User quotas** are properly enforced
5. **Monitoring** is in place for registration abuse

---

## ROLLBACK PLAN

### If Issues Occur After Go-Live:

#### Quick Rollback to Private Launch:
```bash
# 1. Re-disable registration in backend/auth/router.py
sed -i 's/# raise HTTPException(/raise HTTPException(/' backend/auth/router.py

# 2. Re-disable Auth0 user creation
# Manually add back the 403 Forbidden block in auth0_dependencies.py

# 3. Switch back to private launch page
sed -i 's/const RegisterPage = lazy/const PrivateLaunchPage = lazy/' frontend/src/App.jsx
sed -i 's/<RegisterPage \/>/<PrivateLaunchPage \/>/' frontend/src/App.jsx

# 4. Restart services
docker-compose -f docker-compose.domain.yml restart
```

---

## CONTACT & SUPPORT

### For Issues:
- **System Logs**: `docker logs project-backend-1`
- **Nginx Logs**: `docker logs montecarlo-nginx`
- **Database Issues**: Check PostgreSQL container health
- **Auth0 Issues**: Verify dashboard configuration matches this document

### Key Files Modified:
- `backend/config.py` - Auth0 callback URLs
- `backend/auth/auth0_dependencies.py` - User creation logic
- `backend/auth/router.py` - Registration endpoint
- `backend/modules/auth/router.py` - Modular auth registration
- `frontend/src/App.jsx` - Registration page routing
- `frontend/src/pages/LandingPage.jsx` - CTA buttons

### Production Readiness Checklist:
□ DNS fully propagated (check with scripts/check-dns-status.sh)
□ Auth0 dashboard configured correctly
□ Registration script tested in staging
□ User creation flow validated
□ Existing user access confirmed
□ Admin panel functionality verified
□ Monitoring and alerting in place
□ Rollback plan tested and ready

---

**STATUS: Private Launch Active - Ready for Go-Live When Approved**
**LAST UPDATED: 2025-06-27**
**AUTH0 CONFIGURATION: Fixed and Tested**
**DNS STATUS: Partially Propagated (Expected)** 