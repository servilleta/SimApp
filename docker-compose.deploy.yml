version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: montecarlo-postgres
    environment:
      POSTGRES_DB: montecarlo_db
      POSTGRES_USER: montecarlo_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change-in-production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U montecarlo_user -d montecarlo_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: montecarlo-redis
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD:-change-in-production}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-change-in-production}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: montecarlo-backend
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - /usr/local/cuda:/usr/local/cuda:ro
      - /usr/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:ro
    environment:
      # Database
      - DATABASE_URL=postgresql://montecarlo_user:${POSTGRES_PASSWORD:-change-in-production}@postgres:5432/montecarlo_db
      
      # Redis  
      - REDIS_URL=redis://:${REDIS_PASSWORD:-change-in-production}@redis:6379/0
      
      # App Config
      - DEBUG=false
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY:-dc03228c376c05004eaecc90a265753c766409c9d34b178d8bbaa4d71d275848}
      
      # Admin User
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-Demo123!MonteCarlo}
      
      # GPU
      - USE_GPU=true
      - LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/lib/x86_64-linux-gnu
      - CUDA_HOME=/usr/local/cuda
      
      # File Management
      - FILE_CLEANUP_ENABLED=true
      - FILE_RETENTION_DAYS=7
      - CLEANUP_INTERVAL_HOURS=6
      - SAVED_SIMULATIONS_DIR=saved_simulations_files
      
      # Stripe (optional)
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY:-}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      
      # Logging
      - LOG_LEVEL=INFO
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 4G
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend with nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: montecarlo-frontend
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./logs/nginx:/var/log/nginx
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${API_URL:-http://localhost:8000}
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring - Prometheus (optional, can be enabled for production)
  prometheus:
    image: prom/prometheus:latest
    container_name: montecarlo-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring - Grafana (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: montecarlo-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local 