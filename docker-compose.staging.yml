version: '3.8'

services:
  # Frontend - Staging Build
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        - BUILD_ENV=staging
        - REACT_APP_API_URL=${STAGING_API_URL}
    container_name: montecarlo-frontend-staging
    ports:
      - "8080:80"
    environment:
      - NODE_ENV=staging
      - REACT_APP_API_URL=${STAGING_API_URL}
    networks:
      - staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API - Staging
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
      args:
        - BUILD_ENV=staging
    container_name: montecarlo-backend-staging
    ports:
      - "8080:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - /usr/local/cuda:/usr/local/cuda:ro
      - /usr/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:ro
    environment:
      # Core Configuration
      - ENVIRONMENT=staging
      - DEBUG=false
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECRET_KEY=${STAGING_SECRET_KEY}
      - API_URL=${STAGING_API_URL}
      
      # Database
      - DATABASE_URL=postgresql://${STAGING_POSTGRES_USER}:${STAGING_POSTGRES_PASSWORD}@postgres:5432/${STAGING_POSTGRES_DB}
      
      # Redis
      - REDIS_URL=redis://redis:6379/0
      
      # Admin User
      - ADMIN_EMAIL=${STAGING_ADMIN_EMAIL}
      - ADMIN_USERNAME=${STAGING_ADMIN_USERNAME}
      - ADMIN_PASSWORD=${STAGING_ADMIN_PASSWORD}
      
      # GPU Configuration
      - USE_GPU=true
      - CUDA_HOME=/usr/local/cuda
      - LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/lib/x86_64-linux-gnu
      
      # File Management
      - FILE_CLEANUP_ENABLED=true
      - FILE_RETENTION_DAYS=7
      - CLEANUP_INTERVAL_HOURS=6
      - MAX_FILE_SIZE=500MB
      
      # Performance (Staging - Lower than Production)
      - WORKER_COUNT=2
      - MAX_CONNECTIONS=500
      - RATE_LIMIT_REQUESTS=50
      - RATE_LIMIT_WINDOW=60
      
      # Monitoring
      - PROMETHEUS_ENABLED=true
      - METRICS_ENABLED=true
      
      # Security (Staging)
      - CORS_ORIGINS=${STAGING_CORS_ORIGINS}
      - TRUSTED_HOSTS=${STAGING_TRUSTED_HOSTS}
    networks:
      - staging-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy - Staging
  nginx:
    image: nginx:alpine
    container_name: montecarlo-nginx-staging
    ports:
      - "8443:443"
      - "8090:80"
    volumes:
      - ./nginx/nginx-staging.conf:/etc/nginx/nginx.conf:ro
      - ./ssl/staging:/etc/ssl/certs:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database - PostgreSQL Staging
  postgres:
    image: postgres:15-alpine
    container_name: montecarlo-postgres-staging
    environment:
      POSTGRES_DB: ${STAGING_POSTGRES_DB:-montecarlo_staging}
      POSTGRES_USER: ${STAGING_POSTGRES_USER:-montecarlo_staging}
      POSTGRES_PASSWORD: ${STAGING_POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${STAGING_POSTGRES_USER:-montecarlo_staging} -d ${STAGING_POSTGRES_DB:-montecarlo_staging}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache - Staging
  redis:
    image: redis:7-alpine
    container_name: montecarlo-redis-staging
    command: >
      redis-server 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru 
      --appendonly yes
    volumes:
      - redis_staging_data:/data
    networks:
      - staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Monitoring - Prometheus (Staging)
  prometheus:
    image: prom/prometheus:latest
    container_name: montecarlo-prometheus-staging
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_staging_data:/prometheus
    networks:
      - staging-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Monitoring - Grafana (Staging)
  grafana:
    image: grafana/grafana:latest
    container_name: montecarlo-grafana-staging
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${STAGING_GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${STAGING_DOMAIN:-localhost}
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - staging-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

networks:
  staging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/16

volumes:
  postgres_staging_data:
    driver: local
  redis_staging_data:
    driver: local
  prometheus_staging_data:
    driver: local
  grafana_staging_data:
    driver: local
